{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ShyGUI","text":"<p>ShyGUI is a high performance and asynchronous GUI plugin for Bukkit and Folia based Minecraft servers.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Build your own GUI menus with multiple sub-pages and custom items</li> <li>Scripting language to build immersive GUIs</li> <li>PlaceHolderApi support</li> <li>Bukkit and Folia compatible</li> <li>Runs asynchronously</li> <li>Version support 1.8.R1 - 1.21.R5</li> </ul>"},{"location":"api/","title":"Api","text":"<p>ShyGUI offers a Developer Api, however it is not published to Maven Central or any other distribution system yet. You need to directly reference the ShyGUI.jar file.</p>"},{"location":"api/#usage","title":"Usage","text":"<p>Add a dependency in your plugin.yml</p> <pre><code>softdepend: [ ShyGUI ]\n</code></pre> <p>Take a look at the following example: <pre><code>public class YourPlugin extends JavaPlugin {\n    @Override\n    public void onEnable() {\n        // Always gets the same instance of the GUIMenuService.\n        GUIMenuService guiMenuService = Bukkit.getServicesManager().load(GUIMenuService.class);\n        Player player = Bukkit.getPlayer(\"YourPlayerName\");\n        Plugin plugin = this;\n\n        // ShyGUI uses its own main thread to perform actions, to avoid concurrency problems, access it with the executor.\n        Executor guiThreadExecutor = guiMenuService.getExecutor();\n\n        CompletableFuture.runAsync(() -&gt; guiMenuService.getAllGUIMetas() // Retrieve all GUI Metadata on the GUI Thread.\n                .thenAcceptAsync(metas -&gt; metas.stream().filter(e -&gt; e.getName().equals(\"simple_sample_menu\")).findFirst() // Filter it to find the meta with the given name.\n                        .ifPresent(meta -&gt; guiMenuService.openGUIAsync(player, meta, new String[0])), guiThreadExecutor), guiThreadExecutor); // Open the gui with the located meta on the GUI Thread.\n    }\n}\n</code></pre></p>"},{"location":"commands/","title":"Commands","text":"<p>ShyGUI contains many commands to control the state of the GUI on your server, which may be executed by players, console,  other plugins, command blocks.</p>"},{"location":"commands/#individual-commands","title":"Individual commands","text":"<p>You can create individual commands like <code>/mycoolgui</code> to open your created GUI by attaching it to a single GUI page. Open your created <code>menu.yml</code> and specify the command in the <code>command</code> section. </p> <ul> <li>This command does not have any arguments and simply opens the GUI when being executed by a player. </li> <li>For server automation and integration into other plugins, use the <code>/shygui</code> command as explained below.</li> </ul>"},{"location":"commands/#command-shygui","title":"Command /shygui","text":"<p>Required Permission: <code>shygui.command</code></p>"},{"location":"commands/#shygui-open","title":"/shygui open","text":"<pre><code>/shygui open &lt;name&gt; [arguments.../player]\n</code></pre> <p>Starts a new GUI session and opens the GUI with the given name for the executing player. If any other GUIs were open when executing this command, they get discarded from the navigation history.</p> <ul> <li>Name: Identifier of a GUI menu</li> <li>Argument/Player: Optional arguments to provide the GUI with additional arguments and optionally a player to open the GUI for.</li> </ul> <p>Samples:</p> <ul> <li>Opens the inventory for the executing player.</li> </ul> <pre><code>/shygui open simple_sample_menu\n</code></pre> <ul> <li>Opens the inventory for the player named \"Pikachu\".</li> <li>The slash separates arguments with the player name (in this case there are 0 arguments)</li> </ul> <pre><code>/shygui open simple_sample_menu / Pikachu\n</code></pre> <ul> <li>Opens the inventory with additional arguments which can be accessed via the placeholders. <code>%shygui_gui_param1%</code> is now <code>123456</code>.</li> </ul> <pre><code>/shygui open simple_sample_menu 123456\n</code></pre> <ul> <li>Opens the inventory with additional arguments which can be accessed via the placeholders for the player named \"Pikachu\". <code>%shygui_gui_param1%</code> is now <code>123456</code> <code>%shygui_gui_param2%</code> is now <code>abcde</code>.</li> <li>The slash separates arguments with the player name</li> </ul> <pre><code>/shygui open simple_sample_menu 123456 abcde / Pikachu\n</code></pre>"},{"location":"commands/#shygui-next","title":"/shygui next","text":"<pre><code>/shygui next &lt;name&gt; [arguments.../player]\n</code></pre> <p>Reuses the existing GUI session (or starts a new one if it is not available) and opens the GUI with the given name for the executing player. If any other GUIs were open when executing this command, they get put into the navigation history. Executing <code>/shygui back</code> reopens the previous GUI.</p> <ul> <li>Name: Identifier of a GUI menu</li> <li>Argument/Player: Optional arguments to provide the GUI with additional arguments. See the open command for samples.</li> </ul>"},{"location":"commands/#shygui-back","title":"/shygui back","text":"<pre><code>/shygui back [player]\n</code></pre> <p>Checks if the current GUI session contains a previously opened GUI. If that is the case, the previous GUI is opened and the current GUI is discarded. If not GUI is found, the current GUI is simply closed.</p> <ul> <li>Player: Optional player argument to execute the action for another player.</li> </ul>"},{"location":"commands/#shygui-close","title":"/shygui close","text":"<pre><code>/shygui close [player]\n</code></pre> <p>Closes the current GUI and clears the GUI session and navigation history.</p> <ul> <li>Player: Optional player argument to execute the action for another player.</li> </ul>"},{"location":"commands/#shygui-reload","title":"/shygui reload","text":"<pre><code>/shygui reload\n</code></pre> <p>Reloads all GUI meta data and configuration files of the plugin ShyGUI.</p>"},{"location":"gettingstarted/","title":"How to create a new GUI","text":""},{"location":"gettingstarted/#confirming-that-the-plugin-works","title":"Confirming that the plugin works","text":"<ol> <li>Take a look at the provided sample GUIs in the <code>/plugins/ShyGUI/gui</code> directory.</li> <li>Join your server and execute <code>/shygui open simple_sample_menu</code> to open the example gui. A GUI should open.</li> <li>After confirming that the plugin works as expected, you can start by playing around with the available options.</li> </ol>"},{"location":"gettingstarted/#creating-your-first-menu","title":"Creating your first menu","text":"<ol> <li>Copy the <code>simple_sample_menu.yml</code> and rename it to <code>my_first_menu.yml</code>.</li> <li>Open the <code>my_first_menu.yml</code> in an editor like VSCode or NotePad++</li> <li>At the top of the file change the unique identifier of the GUI to </li> </ol> <pre><code>name: \"my_first_menu.yml\"\n</code></pre> <ol> <li>Join your server and execute the following command. This command should always be executed after you have made changes in your <code>.yml</code> files.</li> </ol> <pre><code>/shygui reload\n</code></pre> <ol> <li>Execute the following command to open your GUI.</li> </ol> <pre><code>/shygui open my_first_menu\n</code></pre> <ol> <li>The GUI should now open for you. If it does not, check your console log for yaml file parsing errors. Correct your <code>my_first_menu.yml</code> or start over by deleting it.</li> </ol>"},{"location":"gettingstarted/#attaching-a-custom-command-to-your-menu","title":"Attaching a custom command to your menu","text":"<ol> <li>Let's assume you want to open the GUI with the command <code>/mycoolgui</code>.</li> <li>Edit the command section in your <code>my_first_menu.yml</code> to your needs.</li> </ol> <pre><code>command: \"mycoolgui\"\n</code></pre>"},{"location":"gettingstarted/#customizing-the-gui-menu","title":"Customizing the GUI menu","text":"<ol> <li>There are many different ways to customize the GUI. Like displaying the items, executing certain commands and hiding/showing items on certain conditions.</li> <li>Please take a look into the <code>simple_sample_menu.yml</code> file again. Each available options is explained with a short comments. </li> <li>If the comment mentiones <code>Required.</code> You need to set this property. If it says <code>Optional</code> you do not need to set it.</li> <li>As an easy test, locate the <code>minecraft:gold_block</code> in your <code>my_first_menu.yml</code> and replace it with <code>minecraft:diamond_block</code>. After you gave done that simply execute <code>/shygui reload</code> again and open the GUI <code>/mycoolgui</code>.</li> </ol>"},{"location":"gettingstarted/#advanced-menus-with-sub-pages","title":"Advanced menus with sub-pages","text":"<p>There are also menus starting with <code>petblocks</code> in the <code>gui</code> folder. These are multiple connected menus, which may help you to build more advanced menus. In order to open them, you need to install PlaceHolderAPI and PetBlocks.</p>"},{"location":"permission/","title":"Permission","text":"<p>The following permissions are available in ShyGUI.</p>"},{"location":"permission/#levels","title":"Levels","text":"<ul> <li>User: A permission all players can have.</li> <li>Admin: A permission only Admins should have.</li> </ul> Permission Level Description shygui.command User Allows to use the /shygui command. shygui.gui.[name] User Allows to open a specific gui by name. shygui.manipulateother Admin Allows to open the GUI for another player."},{"location":"placeholders/","title":"PlaceHolders","text":"<p>The following placeholders are available in ShyGUI and can also be used via PlaceHolderApi.</p> Player PlaceHolders Description %shygui_player_name% Player name of the player clicking in the current inventory. %shygui_player_displayName% Player displayName of the player session in the current inventory. %shygui_gui_name% Name of the current inventory. %shygui_gui_backName% Name of the previous inventory (if you have multiple sub pages) %shygui_gui_param1% A GUI can have up to 9 parameters. This placeholders access number 1. %shygui_gui_param2% A GUI can have up to 9 parameters. This placeholders access number 2. %shygui_gui_param3% A GUI can have up to 9 parameters. This placeholders access number 3. %shygui_gui_param4% A GUI can have up to 9 parameters. This placeholders access number 4. %shygui_gui_param5% A GUI can have up to 9 parameters. This placeholders access number 5. %shygui_gui_param6% A GUI can have up to 9 parameters. This placeholders access number 6. %shygui_gui_param7% A GUI can have up to 9 parameters. This placeholders access number 7. %shygui_gui_param8% A GUI can have up to 9 parameters. This placeholders access number 8. %shygui_gui_param9% A GUI can have up to 9 parameters. This placeholders access number 9."},{"location":"script/","title":"Script Language","text":"<p>A simple expression-based scripting language for evaluating conditions and performing basic computations.</p>"},{"location":"script/#data-types","title":"Data Types","text":"<p>The language supports three fundamental data types:</p> <ul> <li>String: Text values enclosed in double quotes</li> <li>Number: Numeric values (integers and decimals)</li> <li>Boolean: <code>true</code> or <code>false</code> values</li> </ul>"},{"location":"script/#literals","title":"Literals","text":""},{"location":"script/#string-literals","title":"String Literals","text":"<pre><code>\"Hello World\"\n\"This is a string\"\n\"\"  // Empty string\n</code></pre>"},{"location":"script/#number-literals","title":"Number Literals","text":"<pre><code>42\n3.14159\n0\n-5.5\n</code></pre>"},{"location":"script/#boolean-literals","title":"Boolean Literals","text":"<pre><code>true\nfalse\nTRUE    // Case insensitive\nFalse   // Case insensitive\n</code></pre>"},{"location":"script/#operators","title":"Operators","text":""},{"location":"script/#comparison-operators","title":"Comparison Operators","text":"<pre><code>==    // Equal to\n!=    // Not equal to\n&gt;     // Greater than\n&gt;=    // Greater than or equal to\n&lt;     // Less than\n&lt;=    // Less than or equal to\n</code></pre>"},{"location":"script/#logical-operators","title":"Logical Operators","text":"<pre><code>&amp;&amp;    // AND\n||    // OR\n!     // NOT\n</code></pre>"},{"location":"script/#operator-precedence-highest-to-lowest","title":"Operator Precedence (highest to lowest)","text":"<ol> <li><code>!</code> (NOT)</li> <li><code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code> (Comparisons)</li> <li><code>==</code>, <code>!=</code> (Equality)</li> <li><code>&amp;&amp;</code> (AND)</li> <li><code>||</code> (OR)</li> </ol>"},{"location":"script/#built-in-functions","title":"Built-in Functions","text":""},{"location":"script/#string-functions","title":"String Functions","text":""},{"location":"script/#stringvalue","title":"<code>STRING(value)</code>","text":"<p>Converts any value to a string. <pre><code>STRING(42)        // \"42\"\nSTRING(true)      // \"true\"\nSTRING(3.14)      // \"3.14\"\n</code></pre></p>"},{"location":"script/#uppertext","title":"<code>UPPER(text)</code>","text":"<p>Converts text to uppercase. <pre><code>UPPER(\"hello\")    // \"HELLO\"\n</code></pre></p>"},{"location":"script/#lowertext","title":"<code>LOWER(text)</code>","text":"<p>Converts text to lowercase. <pre><code>LOWER(\"WORLD\")    // \"world\"\n</code></pre></p>"},{"location":"script/#lengthtext","title":"<code>LENGTH(text)</code>","text":"<p>Returns the length of a string. <pre><code>LENGTH(\"hello\")   // 5\nLENGTH(\"\")        // 0\n</code></pre></p>"},{"location":"script/#containshaystack-needle","title":"<code>CONTAINS(haystack, needle)</code>","text":"<p>Checks if a string contains another string (case-sensitive). <pre><code>CONTAINS(\"hello world\", \"world\")  // true\nCONTAINS(\"Hello\", \"hello\")        // false\n</code></pre></p>"},{"location":"script/#contains_ignore_casehaystack-needle","title":"<code>CONTAINS_IGNORE_CASE(haystack, needle)</code>","text":"<p>Checks if a string contains another string (case-insensitive). <pre><code>CONTAINS_IGNORE_CASE(\"Hello World\", \"hello\")  // true\n</code></pre></p>"},{"location":"script/#numeric-functions","title":"Numeric Functions","text":""},{"location":"script/#numbervalue","title":"<code>NUMBER(value)</code>","text":"<p>Converts a value to a number. <pre><code>NUMBER(\"42\")      // 42.0\nNUMBER(\"3.14\")    // 3.14\nNUMBER(true)      // 1.0\nNUMBER(false)     // 0.0\n</code></pre></p>"},{"location":"script/#absnumber","title":"<code>ABS(number)</code>","text":"<p>Returns the absolute value of a number. <pre><code>ABS(-5)           // 5.0\nABS(3.14)         // 3.14\n</code></pre></p>"},{"location":"script/#roundnumber-decimal_places","title":"<code>ROUND(number, decimal_places)</code>","text":"<p>Rounds a number to the specified number of decimal places. <pre><code>ROUND(3.14159, 2)  // 3.14\nROUND(42.7, 0)     // 43.0\n</code></pre></p>"},{"location":"script/#examples","title":"Examples","text":""},{"location":"script/#basic-comparisons","title":"Basic Comparisons","text":"<pre><code>5 &gt; 3                    // true\n\"apple\" == \"orange\"      // false\nLENGTH(\"test\") &gt;= 4      // true\n</code></pre>"},{"location":"script/#string-operations","title":"String Operations","text":"<pre><code>CONTAINS(\"minecraft\", \"craft\")                    // true\nUPPER(\"hello\") == \"HELLO\"                        // true\nCONTAINS_IGNORE_CASE(\"Player123\", \"player\")     // true\n</code></pre>"},{"location":"script/#using-placeholders-in-expressions","title":"Using PlaceHolders in Expressions","text":"<pre><code>CONTAINS(\"%shygui_player_name%\", \"Mario\")        // If the current player has got 'Mario' in his name.\nUPPER(\"%shygui_player_name%\") == \"MARIO\"        // true\nCONTAINS_IGNORE_CASE(\"%shygui_player_name%\", \"MaRiO\")     // true\n</code></pre>"},{"location":"script/#logical-operations","title":"Logical Operations","text":"<pre><code>true &amp;&amp; false                           // false\n5 &gt; 3 || 2 &lt; 1                        // true\n!CONTAINS(\"hello\", \"world\")            // true\nLENGTH(\"test\") &gt; 0 &amp;&amp; true             // true\n</code></pre>"},{"location":"script/#complex-expressions","title":"Complex Expressions","text":"<pre><code>// Check if a string is not empty and contains specific text\nLENGTH(\"player_name\") &gt; 0 &amp;&amp; CONTAINS_IGNORE_CASE(\"player_name\", \"admin\")\n\n// Validate numeric range\nNUMBER(\"25\") &gt;= 18 &amp;&amp; NUMBER(\"25\") &lt;= 65\n\n// String validation with multiple conditions\nUPPER(\"input\") == \"YES\" || UPPER(\"input\") == \"Y\" || UPPER(\"input\") == \"TRUE\"\n\n// Function composition\nROUND(ABS(-3.14159), 2) == 3.14\n</code></pre>"},{"location":"script/#parentheses-for-precedence","title":"Parentheses for Precedence","text":"<pre><code>(5 + 3) &gt; 6              // true (if arithmetic was supported)\n!(false || true)         // false\nCONTAINS(\"test\", \"t\") &amp;&amp; (true || false)  // true\n</code></pre>"},{"location":"script/#best-practices","title":"Best Practices","text":"<ol> <li>Use parentheses to make complex expressions more readable</li> <li>Validate input before passing to numeric functions</li> <li>Use appropriate case for function names (they're case-insensitive but UPPERCASE is conventional)</li> <li>Handle exceptions when evaluating user-provided expressions</li> <li>Test edge cases like empty strings and zero values</li> </ol>"},{"location":"script/#limitations","title":"Limitations","text":"<ul> <li>No arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) - use functions for calculations</li> <li>No variable assignment - expressions are stateless</li> <li>No custom function definitions</li> <li>Limited to expression evaluation (no statements or control flow)</li> <li>String escape sequences are limited (only <code>\\\"</code> is supported)</li> </ul>"}]}