{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>PetBlocks is a Minecraft Bukkit plugin to use blocks as pets in minecraft.</p> <p>PetBlocks v8 Docs</p> <p>Are you looking for the old wiki? You can download it here. A copy can also be found in the web archive.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Adds a new pet to every player</li> <li>Use blocks or custom heads as skins for your pet</li> <li>Pets are fully programmable using embedded JavaScript + Pet Config files</li> <li>PetBlocks are fully controlable by commands</li> <li>Command can be called by the console, other plugins, command blocks and players</li> <li>Extensive Permission system</li> <li>Support for custom models</li> <li>Easy integration into your server. </li> <li>Easy integration into existing GUI plugins (e.g. DeluxeMenu)</li> <li>PlaceHolderApi Support</li> <li>Multiple pets per player (Premium)</li> </ul>"},{"location":"api/","title":"Api","text":"<p>ShyGUI offers a Developer Api, however it is not published to Maven Central or any other distribution system yet. You need to directly reference the ShyGUI.jar file.</p>"},{"location":"api/#usage","title":"Usage","text":"<p>Add a dependency in your plugin.yml</p> <pre><code>softdepend: [ ShyGUI ]\n</code></pre> <p>Take a look at the following example: <pre><code>public class YourPlugin extends JavaPlugin {\n    @Override\n    public void onEnable() {\n        // Always gets the same instance of the GUIMenuService.\n        GUIMenuService guiMenuService = Bukkit.getServicesManager().load(GUIMenuService.class);\n        Player player = Bukkit.getPlayer(\"YourPlayerName\");\n        Plugin plugin = this;\n\n        // ShyGUI uses its own main thread to perform actions, to avoid concurrency problems, access it with the executor.\n        Executor guiThreadExecutor = guiMenuService.getExecutor();\n\n        CompletableFuture.runAsync(() -&gt; guiMenuService.getAllGUIMetas() // Retrieve all GUI Metadata on the GUI Thread.\n                .thenAcceptAsync(metas -&gt; metas.stream().filter(e -&gt; e.getName().equals(\"simple_sample_menu\")).findFirst() // Filter it to find the meta with the given name.\n                        .ifPresent(meta -&gt; guiMenuService.openGUI(player, meta, new String[0])), guiThreadExecutor), guiThreadExecutor); // Open the gui with the located meta on the GUI Thread.\n    }\n}\n</code></pre></p>"},{"location":"commands/","title":"Commands","text":"<p>ShyGUI contains many commands to control the state of the GUI on your server, which may be executed by players, console,  other plugins, command blocks.</p>"},{"location":"commands/#individual-commands","title":"Individual commands","text":"<p>You can create individual commands like <code>/mycoolgui</code> to open your created GUI by attaching it to a single GUI page. Open your created <code>menu.yml</code> and specify the command in the <code>command</code> section. </p> <ul> <li>This command does not have any arguments and simply opens the GUI when being executed by a player. </li> <li>For server automation and integration into other plugins, use the <code>/shygui</code> command as explained below.</li> </ul>"},{"location":"commands/#command-shygui","title":"Command /shygui","text":"<p>Required Permission: <code>shygui.command</code></p>"},{"location":"commands/#shygui-open","title":"/shygui open","text":"<pre><code>/shygui open &lt;name&gt; [argument/player...]\n</code></pre> <p>Starts a new GUI session and opens the GUI with the given name for the executing player. If any other GUIs were open when executing this command, they get discarded from the navigation history.</p> <ul> <li>Name: Identifier of a GUI menu</li> <li>Argument/Player: Optional arguments to provide the GUI with additional arguments e.g. <code>/shygui open simple_sample_menu 123456 Pikachu</code>. Here the placeholder <code>%shygui_gui_param1%</code> is now <code>123456</code> and the GUI is opened for player <code>Pikachu</code>. The last argument may or may not be a player name.</li> </ul>"},{"location":"commands/#shygui-next","title":"/shygui next","text":"<pre><code>/shygui next &lt;name&gt; [argument/player...]\n</code></pre> <p>Reuses the existing GUI session (or starts a new one if it is not available) and opens the GUI with the given name for the executing player. If any other GUIs were open when executing this command, they get put into the navigation history. Executing <code>/shygui back</code> reopens the previous GUI.</p> <ul> <li>Name: Identifier of a GUI menu</li> <li>Argument/Player: Optional arguments to provide the GUI with additional arguments e.g. <code>/shygui open simple_sample_menu 123456 Pikachu</code>. Here the placeholder <code>%shygui_gui_param1%</code> is now <code>123456</code> and the GUI is opened for player <code>Pikachu</code>. The last argument may or may not be a player name.</li> </ul>"},{"location":"commands/#shygui-back","title":"/shygui back","text":"<pre><code>/shygui back [player]\n</code></pre> <p>Checks if the current GUI session contains a previously opened GUI. If that is the case, the previous GUI is opened and the current GUI is discarded. If not GUI is found, the current GUI is simply closed.</p> <ul> <li>Player: Optional player argument to execute the action for another player.</li> </ul>"},{"location":"commands/#shygui-close","title":"/shygui close","text":"<pre><code>/shygui close [player]\n</code></pre> <p>Closes the current GUI and clears the GUI session and navigation history.</p> <ul> <li>Player: Optional player argument to execute the action for another player.</li> </ul>"},{"location":"commands/#shygui-reload","title":"/shygui reload","text":"<pre><code>/shygui reload\n</code></pre> <p>Reloads all GUI meta data and configuration files of the plugin ShyGUI.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#how-can-i-use-shygui-for-an-older-minecraft-version","title":"How can I use ShyGUI for an older Minecraft version?","text":"<p>Maintaining backwards compatibility is very hard and actively discouraged by spigot. I do my best to add more and more workarounds. However, it has become so much work, that you can only download them by becoming a Patreon https://www.patreon.com/Shynixn.</p>"},{"location":"gettingstarted/","title":"Getting Started","text":""},{"location":"gettingstarted/#confirming-that-the-plugin-works","title":"Confirming that the plugin works","text":"<ol> <li> <p>Take a look at the provided sample GUIs in the <code>/plugins/ShyGUI/gui</code> directory. </p> </li> <li> <p>Join your server and execute <code>/shygui open simple_sample_menu</code> to open the example gui. A GUI should open.</p> </li> <li>After confirming that the plugin works as expected, you can start by playing around with the available options.</li> </ol>"},{"location":"gettingstarted/#creating-your-first-menu","title":"Creating your first menu","text":"<ol> <li>Copy the <code>simple_sample_menu.yml</code> and rename it to <code>my_first_menu.yml</code>.</li> <li>Open the <code>my_first_menu.yml</code> in an editor like VSCode or NotePad++</li> <li>At the top of the file change the unique identifier of the GUI to </li> </ol> <pre><code>name: \"my_first_menu.yml\"\n</code></pre> <ol> <li>Join your server and execute the following command. This command should always be executed after you have made changes in your <code>.yml</code> files.</li> </ol> <pre><code>/shygui reload\n</code></pre> <ol> <li>Execute the following command to open your GUI.</li> </ol> <pre><code>/shygui open my_first_menu\n</code></pre> <ol> <li>The GUI should now open for you. If it does not, check your console log for yaml file parsing errors. Correct your <code>my_first_menu.yml</code> or start over by deleting it.</li> </ol>"},{"location":"gettingstarted/#attaching-a-custom-command-to-your-menu","title":"Attaching a custom command to your menu","text":"<ol> <li>Let's assume you want to open the GUI with the command <code>/mycoolgui</code>.</li> <li>Edit the command section in your <code>my_first_menu.yml</code> to your needs.</li> </ol> <pre><code>command: \"mycoolgui\"\n</code></pre>"},{"location":"gettingstarted/#customizing-the-gui-menu","title":"Customizing the GUI menu","text":"<ol> <li>There are many different ways to customize the GUI. Like displaying the items, executing certain commands and hiding/showing items on certain conditions.</li> <li>Please take a look into the <code>simple_sample_menu.yml</code> file again. Each available options is explained with a short comments. </li> <li>If the comment mentiones <code>Required.</code> You need to set this property. If it says <code>Optional</code> you do not need to set it.</li> <li>As an easy test, locate the <code>minecraft:gold_block</code> in your <code>my_first_menu.yml</code> and replace it with <code>minecraft:diamond_block</code>. After you gave done that simply execute <code>/shygui reload</code> again and open the GUI <code>/mycoolgui</code>.</li> </ol>"},{"location":"permission/","title":"Permission","text":"<p>The following permissions are available in ShyGUI.</p>"},{"location":"permission/#levels","title":"Levels*","text":"<p>** User: A permission all players can have. * Admin: A permission only Admins should have. * Admin/User: Depending on your server, you may give this permission to your players. If you are not sure, try to build   your server around not giving this permission to your players.</p> Permission Level Description shygui.command User Allows to use the /shygui command. shygui.gui.[name] User Allows to open a specific gui by name. shygui.manipulateother Admin Allows to open the GUI for another player."},{"location":"placeholders/","title":"PlaceHolders","text":"<p>The following placeholders are available in PetBlocks and can also be used via PlaceHolderApi.</p> <p>PlaceHolder Api</p> <p>As PetBlocks supports multiple pets per player, you need to select the pet in your placeholders. You can do this by appending the pet slot <code>_1</code> <code>_2</code> etc. or use the <code>/petblocks select &lt;name&gt;</code> command to set a pet as selected which can be retrieved using <code>_selected</code>. This results into placeholders such as e.g. <code>%petblocks_pet_displayName_1%</code> or <code>%petblocks_pet_displayName_selected%</code>. This is only relevant in external plugins. For actions in PetBlocks, you can directly use the placeholders below.</p> Player PlaceHolders Description %petblocks_owner_name% Player name of the owner of a pet. %petblocks_owner_displayName% Player displayName of the owner of a pet. %petblocks_owner_locationWorld% Name of the world the owner of a pet is inside. %petblocks_owner_locationX% X coordinate of the owner of a pet. %petblocks_owner_locationY% Y coordinate of the owner of a pet. %petblocks_owner_locationZ% Z coordinate of the owner of a pet. %petblocks_owner_locationYaw% Yaw rotation of the owner of a pet. %petblocks_owner_locationPitch% Yaw rotation of the owner of a pet. %petblocks_owner_itemMainHand_type% Name of the item type in the owner's main hand Pet PlaceHolders Description %petblocks_pet_name% Id of a pet %petblocks_pet_displayName% Displayname of a pet %petblocks_pet_distanceToOwner% Distance from the pet to the owner. If the owner is in another world, this value becomes very high. %petblocks_pet_exists% True if the pet exists, false if not. %petblocks_pet_isSpawned% True if the pet is spawned, false if not. %petblocks_pet_template% Name of the template a pet uses. %petblocks_pet_visibility% Visibility Type a pet uses. %petblocks_pet_isMounted% True if the owner rides the pet or uses it as a hat. %petblocks_pet_loop% Name of the loop a pet currently executes. %petblocks_pet_locationWorld% Name of the world the pet is inside. %petblocks_pet_locationX% X coordinate of the pet. %petblocks_pet_locationY% Y coordinate of the pet. %petblocks_pet_locationZ% Z coordinate of the pet. %petblocks_pet_locationYaw% Yaw rotation of the pet. %petblocks_pet_locationPitch% Yaw rotation of the pet. %petblocks_pet_itemType% The head item type of the pet. %petblocks_pet_itemNbt% The head item NBT of the pet. &lt; 1.20.5 %petblocks_pet_itemComponent% The head item data component of the pet. &gt;= 1.20.5 %petblocks_pet_itemHeadBase64% The head item Base64 Skin Url of the pet. %petblocks_pet_isBreakingBlock% True if the pet is currently breaking a block, false if not. %petblocks_pet_blockInFrontType% Name of the block type the pet is looking at Event Player PlaceHolders Description %petblocks_eventPlayer_name% Player name of the event trigger player. %petblocks_eventPlayer_displayName% Player displayName of the event trigger player. %petblocks_eventPlayer_locationWorld% Name of the world event trigger player of a pet is inside. %petblocks_eventPlayer_locationX% X coordinate of the event trigger player. %petblocks_eventPlayer_locationY% Y coordinate of the event trigger player. %petblocks_eventPlayer_locationZ% Z coordinate of the event trigger player. %petblocks_eventPlayer_locationYaw% Yaw rotation of the event trigger player. %petblocks_eventPlayer_locationPitch% Yaw rotation of the event trigger player. %petblocks_eventPlayer_itemMainHand_type% Name of the item type in the players's main hand"},{"location":"receivingpets/","title":"Giving Pets to Players","text":"<p>Once you have setup the permission, join your server. The PetBlocks default configuration creates a pet with template <code>classic</code> for you and makes it spawn in front of you. If you cannot see the pet, try executing <code>/petblocks call pet</code> or review your permissions again.</p> <p>Make sure your players have this permission to see their pet: <pre><code>petblocks.pet.spawn\n</code></pre></p> <p>The next step is to decide, how you want your players to receive a pet. There are multiple options below.</p>"},{"location":"receivingpets/#receiving-a-pet-on-first-join","title":"Receiving a pet on first join","text":"<p>This is enabled per default and can be changed in the <code>config.yml</code> under <code>pet/receivePetsOnJoin</code>. This creates a new database entry for each joining player, regardless if he has the spawn permission or not. The player requires the minimum <code>petblocks.pet.spawn</code> to see their pet.</p> <p>If you want to receive no pets on join and unlock pets later own (e.g. for shops or VIP perks), change this to: </p> <pre><code>pet:\n  receivePetsOnJoin: []\n</code></pre> <p>If you want to receive multiple pets (PetBlocks-Premium only) on first join. Append other pets below it. They have to have different names.</p> <pre><code>pet:\n  receivePetsOnJoin:\n    - name: \"pet1\"\n      template: \"classic\"\n    - name: \"pet2\"\n      template: \"classic\"      \n</code></pre> <p>In order to configure, if the pet should automatically spawn in front of the player on creation, open the template  <code>plugins/PetBlocks/pets/pet_classic.yml</code>. Set <code>pet/spawned</code> to <code>true</code> or <code>false</code>.</p>"},{"location":"receivingpets/#receiving-pets-using-a-shop","title":"Receiving pets using a shop","text":"<p>There are many ways how you can handle it. These are just examples below:</p> <p>Building GUIS with DeluxeMenu</p> <p>PetBlocks distributes premade DeluxeMenu based inventories, which may help you design your own inventories. See the GUI page for more details.</p>"},{"location":"receivingpets/#option-1-just-selling-skins-for-your-pet-easy","title":"Option 1 - Just selling skins for your pet (easy)","text":"<ol> <li>Build a shop GUI using an external GUI plugin. (e.g. DeluxeMenu).</li> <li>Keep the receive pet on join settings, the player should receive a pet everytime. </li> <li>Invent a new permission for each pet you would like to sell like <code>petblocks.pettype.&lt;yourpettype&gt;</code> e.g. <code>petblocks.pettype.pikachu</code>.</li> <li>Once a player buys the item in your shop, give them your newly invented permission e.g. <code>petblocks.pettype.pikachu</code></li> <li>Show an item in your GUI to change the skin to pikachu only, if the player has got the newly invented permission e.g. <code>petblocks.pettype.pikachu</code></li> <li>Execute the command with server level permission:</li> </ol> <pre><code>/petblocks skinbase64 pet eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvOTdlYmNlZjQ2ODNjZGI3MTYzZTk2OWU0ZTIyNjlmMzY3M2E1ZDVlNmI3OGUwNmZhZWU0NWJjZjdjNDljMzk3In19fQ== %petblocks_owner_name%\n</code></pre> <p>DeluxeMenu e.g.: <pre><code>[console] petblocks skinbase64 %petblocks_pet_name_selected% eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvOTdlYmNlZjQ2ODNjZGI3MTYzZTk2OWU0ZTIyNjlmMzY3M2E1ZDVlNmI3OGUwNmZhZWU0NWJjZjdjNDljMzk3In19fQ== %petblocks_owner_name%\n</code></pre></p>"},{"location":"receivingpets/#option-2-state-handling-of-pets-hard","title":"Option 2 - State handling of pets (hard)","text":"<ol> <li>Build a shop GUI using an external GUI plugin. (e.g. DeluxeMenu).</li> <li>Disable receive pet on join like shown above</li> <li>Invent a new permission for each pet you would like to sell like <code>petblocks.pettype.&lt;yourpettype&gt;</code> e.g. <code>petblocks.pettype.pikachu</code>. </li> <li>Once a player buys the item in your shop, give them your new invented permission e.g. <code>petblocks.pettype.pikachu</code></li> <li>Build a pet management GUI using an external GUI plugin (e.g. DeluxeMenu).</li> <li>Create a new item which is only visible if the player has obtained the e.g. <code>petblocks.pettype.pikachu</code> permission.</li> <li>When the player clicks on that item, execute the following command with server level permission:</li> </ol> <pre><code>/petblocks create &lt;petName&gt; &lt;templateName&gt; %petblocks_owner_name%\n</code></pre> <p>DeluxeMenu e.g.:</p> <pre><code>[console] petblocks create pet classic %petblocks_owner_name%\n</code></pre> <p>Executing the create command multiple times is fine, it does not do anything if the pet already exists.</p>"},{"location":"receivingpets/#option-3-free-creationdeletion-of-pets-for-players-easy","title":"Option 3 - Free creation/deletion of pets for players (easy)","text":"<ol> <li>Give your players the permission to the following</li> </ol> <pre><code>petblocks.pet.create\npetblocks.pet.delete\npetblocks.pet.amount.1\n</code></pre> <ol> <li>Disable receive pet on join like shown above</li> <li>Build a shop GUI using an external GUI plugin. (e.g. DeluxeMenu).</li> <li>Once a player buys the item in your shop, give them the permission to the petblocks template e.g. <code>petblocks.pet.template.classic</code>.</li> <li>Let the player freely execute <code>/petblocks create &lt;petName&gt; classic</code> and  <code>/petblocks delete &lt;petName&gt;</code> . You can also setup this in a GUI.</li> </ol>"},{"location":"template/","title":"Template","text":"<p>PetBlocks allows you to create templates, how a pet is going to look like and how it is going to behave. You can fully customize the behaviour and program the pets to perform certain actions.</p> <p>PetBlocks provides you with a starting pet template called <code>classic</code>, which can be found in the <code>plugins/PetBlocks/pets/</code> folder. You can copy this template and start desigining your own pets. Make sure to give it a new unique template identifier.</p> <p>Modify a template and execute <code>/petblocks reload</code> to apply the changes to your pet.</p>"},{"location":"template/#static-values","title":"Static Values","text":"<p>Most of the static values are explained in the config file itself. Set them according to your needs.</p> <p>Example for static values are <code>name</code>, <code>version</code> and all initial pet settings under <code>pet:</code>.</p>"},{"location":"template/#events","title":"Events","text":"<p>Events define what happens on certain events. Currently only leftClick and rightClick on the pet is supported. These actions get executed when a player left clicks on the pet. However, it may not be the owner, who clicks on a pet, therefore it needs to be checked if you only want to allow certain actions for the owner of the pet.</p> <p>Example:</p> <pre><code>events:\n  rightClick:\n    actions:  # You can add/remove actions as you want here.\n      - name: \"Open the DeluxeMenu based pet inventory\" #  You need to install the plugin DeluxeMenu for this to work and copy the premade PetBlocks inventory from the thirdparty folder.\n        condition:\n          type: STRING_EQUALS\n          left: \"%petblocks_eventPlayer_name%\"\n          right: \"%petblocks_owner_name%\"\n        type: \"COMMAND\"\n        level: \"PLAYER\"\n        run:\n          - \"/petblocks select %petblocks_pet_name%\"\n          - \"/dm open petblocks_menu %petblocks_eventPlayer_name%\"\n</code></pre> <p>If you want to execute nothing when the player rightClicks on the pet, remove all actions.</p> <pre><code>events:\n  rightClick:\n    actions: []\n</code></pre>"},{"location":"template/#building-a-new-action","title":"Building a new action","text":"<p>PlaceHolders</p> <p>You can use placeholders almost anywhere when building actions. You can even use PlaceHolderApi based placeholders.</p> <p>Create a new action and give it an arbitrary name.</p> <pre><code>events:\n  rightClick:\n    actions:  # You can add/remove actions as you want here.\n      - name: \"My new action\" # Required arbitrary name.\n</code></pre> <p>Select the action type. Support actions are <code>COMMAND</code>, <code>DELAY</code>, <code>JAVASCRIPT</code>.</p>"},{"location":"template/#command","title":"COMMAND","text":"<p>Executes one or multiple commands as Console or Player.</p> <p>Vanilla Commands</p> <p>A vanilla command may automatically log to the console and to the chat of every op player. You can disable the output for op players using vanilla game rules such as <code>/gamerule sendCommandFeedback false</code>, <code>/gamerule logAdminCommands false</code>, <code>/gamerule commandBlockOutput false</code>. If you want to hide the output in your console (not recommend), you need to install a LogFilter plugin.</p> <pre><code>events:\n  rightClick:\n    actions:  # You can add/remove actions as you want here.\n      - name: \"My new action\" # Required arbitrary name.\n        type: \"COMMAND\" # Required action type.\n        level: \"SERVER\" # Required for type COMMAND. Possible values are PLAYER (player level permission), SERVER (console level permission)\n</code></pre> <pre><code>events:\n  rightClick:\n    actions:  # You can add/remove actions as you want here.\n      - name: \"My new action\" # Required arbitrary name.\n        type: \"COMMAND\" # Required action type.\n        level: \"SERVER\" # Required for type COMMAND. Possible values are PLAYER (player level permission), SERVER (console level permission)\n        run: \n          - \"/say Hello %petblocks_owner_name%\" # Required for type COMMAND. One or more commands are allowed.\n</code></pre>"},{"location":"template/#delay","title":"DELAY","text":"<p>Delays the next action for a certain amount of ticks.</p> <pre><code>events:\n  rightClick:\n    actions:  # You can add/remove actions as you want here.\n      - name: \"Delay Action\" # Required arbitrary name.\n        type: \"DELAY\" # Required action type.\n        ticks: 60 # Required for type DELAY. 60 Ticks delay.\n</code></pre>"},{"location":"template/#javascript","title":"JAVASCRIPT","text":"<p>Executes JavaScript based Code for value calculation</p> <pre><code>events:\n  rightClick:\n    actions:  # You can add/remove actions as you want here.\n      - name: \"JavaScript action\" # Required arbitrary name.\n        type: \"JAVASCRIPT\" # Required action type.\n        initial: \"Cool\" # Required for type JAVASCRIPT. The initial value of the result variable.\n        variable: \"myVariable\" # Required for type JAVASCRIPT. The name of the result variable, which can be read using PlaceHolders.\n        js: |                  # Required for type JAVASCRIPT. Actual multi line JavaScript code.\n          function createText() {\n             var text = \"%petblocks_js_myVariable%\" + \" Plugin\"\n             return text\n          }\n          createText();\n</code></pre>"},{"location":"template/#debugging-actions","title":"Debugging Actions","text":"<p>When you start creating actions, it is very helpful to know, which action is currently being executed and how variables are evaluated. Every action can be logged to your server console by setting the optional <code>debug: true</code> property of an action.</p> <pre><code>events:\n  rightClick:\n    actions:  # You can add/remove actions as you want here.\n      - name: \"Delay Action\" # Required arbitrary name.\n        type: \"DELAY\" # Required action type.\n        ticks: 60 # Required for type DELAY. 60 Ticks delay.\n        debug: true # Optional flag to log this action to the console.\n</code></pre>"},{"location":"template/#restricting-actions","title":"Restricting Actions","text":""},{"location":"template/#permission","title":"Permission","text":"<p>Actions can optionally have the permission tag:</p> <pre><code>events:\n  rightClick:\n    actions:  # You can add/remove actions as you want here.\n      - name: \"My new action\" # Required arbitrary name.\n        permission: \"mycustom.permission\"\n        type: \"COMMAND\" # Required action type.\n        level: \"SERVER\" # Required for type COMMAND. Possible values are PLAYER (player level permission), SERVER (console level permission)\n        run: \n          - \"/say Hello %petblocks_owner_name%\" # Required for type COMMAND. One or more commands are allowed.\n</code></pre>"},{"location":"template/#conditions","title":"Conditions","text":"<p>Actions can optionally have conditions, which support the following types:</p> <ul> <li><code>STRING_EQUALS</code></li> <li><code>STRING_NOT_EQUALS</code></li> <li><code>STRING_EQUALS_IGNORE_CASE</code></li> <li><code>STRING_NOT_EQUALS_IGNORE_CASE</code></li> <li><code>NUMBER_GREATER_THAN</code></li> <li><code>NUMBER_GREATER_THAN_OR_EQUAL</code></li> <li><code>NUMBER_LESS_THAN</code></li> <li><code>NUMBER_LESS_THAN_OR_EQUAL</code></li> <li><code>JAVASCRIPT</code></li> </ul> <p>Try to avoid using <code>JAVASCRIPT</code> because it requires more computation time. It should only be used if you want to create complex boolean expressions.</p> <pre><code>events:\n  rightClick:\n    actions:  # You can add/remove actions as you want here.\n      - name: \"My new action\" # Required arbitrary name.\n        condition: # Optional condition tag.\n          type: STRING_EQUALS # Required condition type.\n          left: \"%petblocks_eventPlayer_name%\" \n          right: \"%petblocks_owner_name%\"\n        type: \"COMMAND\" # Required action type.\n        level: \"SERVER\" # Required for type COMMAND. Possible values are PLAYER (player level permission), SERVER (console level permission)\n        run: \n          - \"/say Hello %petblocks_owner_name%\" # Required for type COMMAND. One or more commands are allowed.\n</code></pre> <pre><code>events:\n  rightClick:\n    actions:  # You can add/remove actions as you want here.\n      - name: \"My new action\" # Required arbitrary name.\n        condition: # Optional condition tag.\n          type: JAVASCRIPT # Required condition type.\n          js: \"Math.floor(Math.random() * 100) &lt;= 50\" # 50% chance to execute this command.\n        type: \"COMMAND\" # Required action type.\n        level: \"SERVER\" # Required for type COMMAND. Possible values are PLAYER (player level permission), SERVER (console level permission)\n        run: \n          - \"/say Hello %petblocks_owner_name%\" # Required for type COMMAND. One or more commands are allowed.\n</code></pre>"},{"location":"template/#loops","title":"Loops","text":"<p>Loops define, what the pet should repeatedly do. You can customize and define your own loops using actions.</p> <p>Programmable Pets</p> <p>You can freely build new loops, delete loops and customize the behavior of pets. The actions allow full freedom to  design your pets. </p>"},{"location":"template/#idle-loop","title":"Idle Loop","text":"<p>The idle loop explained:</p> <ol> <li>Delay Action<ol> <li>We wait for 20 ticks.</li> </ol> </li> <li>Look at owner with a 90% change.<ol> <li>The JavaScript condition is evaluated, which returns true 90% of the time</li> <li>The console executes the command <code>/petblocks lookatowner %petblocks_pet_name% %petblocks_owner_name%</code></li> </ol> </li> <li>Switch to moveToOwner if pet is too far away<ol> <li>The JavaScript condition is evaluated, if the distance of the pet to the owner is bigger than 7 blocks.</li> <li>If true, the console executes the command <code>/petblocks loop %petblocks_pet_name% moveToOwner %petblocks_owner_name%</code> , which switches the loop <code>idle</code> to the loop called <code>moveToOwner</code>.</li> <li>If false, this loop continous and starts again from the top with <code>Delay Action</code></li> </ol> </li> </ol> <pre><code>loops:\n  idle: \n    actions:\n      - name: \"Delay Action\"\n        type: \"DELAY\"\n        ticks: 20\n      - name: \"Look at owner with a 90% change.\"\n        condition:\n          type: JAVASCRIPT\n          js: \"Math.floor(Math.random() * 100) &lt;= 90\" # Calculate chance in JavaScript.\n        type: \"COMMAND\"\n        level: \"SERVER\"\n        run:\n          - \"/petblocks lookatowner %petblocks_pet_name% %petblocks_owner_name%\"\n      - name: \"Switch to moveToOwner if pet is too far away\"\n        condition:\n          type: JAVASCRIPT\n          js: \"%petblocks_pet_distanceToOwner% &gt; 7\"\n        type: \"COMMAND\"\n        level: \"SERVER\"\n        run:\n          - \"/petblocks loop %petblocks_pet_name% moveToOwner %petblocks_owner_name%\"\n</code></pre>"},{"location":"template/#movetoowner-loop","title":"MoveToOwner Loop","text":"<p>As we noticed that the loop changes to the loop <code>moveToOwner</code>, we take a look at this loop too.</p> <ol> <li>Recalculate path and start moving to owner.<ol> <li>The console executes the command <code>/petblocks moveToOwner %petblocks_pet_name% 0.2 %petblocks_owner_name%</code></li> </ol> </li> <li>Switch to idle if the pet is beside the player<ol> <li>The JavaScript condition is evaluated, if the distance of the pet to the owner is smaller than 4 blocks.</li> <li>If true, the console executes the command <code>/petblocks loop %petblocks_pet_name% moveToOwner %petblocks_owner_name%</code> , which switches the loop <code>moveToOwner</code> to the loop called <code>idle</code>.</li> <li>If false, the next action is executed.</li> </ol> </li> <li>Teleport pet to player if the pet is too far away for the pathfinder.<ol> <li>The JavaScript condition is evaluated, if the distance of the pet to the owner is bigger than 20 blocks.</li> <li>If true, the command is executed to teleport the pet to the owner location.</li> <li>If false, the next action is executed.</li> </ol> </li> <li>Delay Action<ol> <li>We wait for 20 ticks.</li> <li>The loop continous and starts again from the top with <code>Recalculate path and start moving to owner</code></li> </ol> </li> </ol> <pre><code>loops:\n  moveToOwner:\n    actions:\n      - name: \"Recalculate path and start moving to owner.\"\n        type: \"COMMAND\"\n        level: \"SERVER\"\n        run:\n          - \"/petblocks moveToOwner %petblocks_pet_name% 0.2 %petblocks_owner_name%\"\n      - name: \"Switch to idle if the pet is beside the player\"\n        condition:\n          type: JAVASCRIPT\n          js: \"%petblocks_pet_distanceToOwner% &lt; 4\"\n        type: \"COMMAND\"\n        level: \"SERVER\"\n        run:\n          - \"/petblocks loop %petblocks_pet_name% idle %petblocks_owner_name%\"\n      - name: \"Teleport pet to player if the pet is too far away for the pathfinder.\"\n        condition:\n          type: JAVASCRIPT\n          js: \"%petblocks_pet_distanceToOwner% &gt; 20\"\n        type: \"COMMAND\"\n        level: \"SERVER\"\n        run:\n          - \"/petblocks teleport %petblocks_pet_name% %petblocks_owner_locationWorld% %petblocks_owner_locationX% %petblocks_owner_locationY% %petblocks_owner_locationZ% %petblocks_owner_locationYaw% %petblocks_owner_locationPitch% %petblocks_owner_name%\"\n      - name: \"Delay Action\"\n        type: \"DELAY\"\n        ticks: 20\n</code></pre>"}]}